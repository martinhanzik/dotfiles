[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit --decorate
  la = log --pretty=oneline -n 20 --graph --abbrev-commit --decorate --all

  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  dc = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --cached --patch-with-stat"

  c = commit
  cf = !"git commit -m 'Compilation fix.'"
  cfs = !"git commit -m 'Compilation fixes.'"
  wd = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --color-words --patch-with-stat"
  wdc = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --color-words --cached --patch-with-stat"

  co = checkout

  cp = cherry-pick

  f = fetch --prune --verbose

  m = merge --ff-only

  fm = !"git f && git m"
  fr = !"git f && git r"

  r = rebase --preserve-merges

  rc = rebase --continue

  ra = rebase --abort

  a = add
  aa = add -A

  p = push
  ph = push heroku master
  st = !"git -c commit.gpgsign=false stash"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
	excludesfile = /Users/HanziQ/.gitignore_global
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[diff]

  # Detect copies as well as renames
  renames = copies

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 0

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = simple

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"
[user]
	name = Martin Hanzík
	email = martin@hanzik.com
[credential]
	helper = osxkeychain
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.1/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

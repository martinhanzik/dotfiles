set background=dark
colorscheme solarized

set guifont=Source\ Code\ Pro\ Light:h12

" Make Vim more useful
set nocompatible
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Allow cursor keys in insert mode
set esckeys
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Change mapleader
let mapleader="\<Space>"
set noeol
" Centralize backups, swapfiles and undo history
set noswapfile
set backupdir=~/.vim/backups
set directory=~/.vim/swaps/
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Enable line numbers
set number
" Enable syntax highlighting
syntax on
" Highlight current line
set cursorline
" Make tabs as wide as two spaces
set tabstop=2
" Show “invisible” characters
set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
set mouse=a "vic
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title

set splitbelow
set splitright
set hidden
set lazyredraw
set showmode
set nowrap
set copyindent
set shiftwidth=2
set shiftround
set ignorecase
set smartcase
set hlsearch
set pastetoggle=<F2>
set wrapmargin=0
set formatoptions-=tc
set diffopt=iwhite
match ErrorMsg '\s\+$'
set expandtab
set tabstop=2
set cscopetag
set exrc
set secure

if filereadable("cscope.out")
  cs add cscope.out
elseif $CSCOPE_DB != ""
  cs add $CSCOPE_DB
endif

set nocscopeverbose

nnoremap Q <nop>

" Let's make it easy to edit this file (mnemonic for the key sequence is
" 'e'dit 'v'imrc)
nmap <silent> <leader>ev :e $MYVIMRC<cr>

" And to source this file as well (mnemonic for the key sequence is
" 's'ource 'v'imrc)
nmap <silent> <leader>sv :so $MYVIMRC<cr>

augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Set up a keymapping from <Leader>df to a function call.
" (Note the function doesn't need to be defined beforehand.)
" Run this mapping silently. That is, when I call this mapping,
" don't bother showing "call DiffToggle()" on the command line.
nnoremap <silent> <Leader>df :call DiffToggle()<CR>

" Define a function called DiffToggle.
" The ! overwrites any existing definition by this name.
function! DiffToggle()
    " Test the setting 'diff', to see if it's on or off.
    " (Any :set option can be tested with &name.
    " See :help expr-option.)
    if &diff
        diffoff
    else
        diffthis
    endif
:endfunction

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction

"This allows for change paste motion cp{motion}
nmap <silent> cp :set opfunc=ChangePaste<CR>g@
function! ChangePaste(type, ...)
    silent exe "normal! `[v`]\"_c"
    silent exe "normal! p"
endfunction

noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
nnoremap <leader>W :w !sudo tee % > /dev/null<CR>
nnoremap <leader>o :CtrlP<CR>
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>x :x<CR>
nnoremap <leader>e :e<Space>
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>a :A<CR>
nnoremap <leader>b :BuffergatorToggle<CR>

nmap <silent> <leader>/ :nohlsearch<CR>

" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
endif

inoremap jk <ESC>
inoremap kj <ESC>
nnoremap ; :

" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

imap <tab> <c-p>

nnoremap <F6> :GundoToggle<CR>
map <C-n> :NERDTreeToggle<CR>

nmap <F8> :TagbarToggle<CR>

nnoremap \ :Ag<SPACE>
nnoremap K :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

inoremap {{ {<CR>}<Esc>O

filetype off

if !isdirectory(expand("~/.vim/bundle/Vundle.vim/.git"))
    !git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'kien/ctrlp.vim'
Plugin 'FelikZ/ctrlp-py-matcher'
Plugin 'sjl/gundo.vim'
Plugin 'scrooloose/nerdtree'
" Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'majutsushi/tagbar'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'rking/ag.vim'
" Plugin 'terryma/vim-expand-region'
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'jeaye/color_coded'
Plugin 'rdnetto/YCM-Generator'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'easymotion/vim-easymotion'
Plugin 'vim-scripts/a.vim'
Plugin 'jeetsukumaran/vim-buffergator'
" Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-unimpaired'
Plugin 'scrooloose/nerdcommenter'
Plugin 'myusuf3/numbers.vim'
Plugin 'melku/vim-fbuild'

call vundle#end()            " required
filetype plugin indent on    " required

" Plugin config
let g:tmux_navigator_save_on_switch = 1

let g:ctrlp_map = ''

let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'
set grepprg=ag\ --nogroup\ --nocolor
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" Set delay to prevent extra search
let g:ctrlp_lazy_update = 350

" Do not clear filenames cache, to improve CtrlP startup
" You can manualy clear it by <F5>
let g:ctrlp_clear_cache_on_exit = 0

" Set no file limit, we are building a big project
let g:ctrlp_max_files = 0

let g:ctrlp_match_window = 'bottom,btt,max:50'

let g:gundo_close_on_revert = 1

let g:tagbar_autofocus = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''

let g:ag_working_path_mode='r'

let g:ycm_confirm_extra_conf = 0
let g:ycm_filetype_whitelist = { 'cpp': 1, 'hpp': 1 }
let g:ycm_collect_identifiers_from_tags_files = 1

let g:buffergator_suppress_keymaps = 1

set tw=0
